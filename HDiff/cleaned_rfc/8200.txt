Options                            .
Next Header         8-bit selector.  Identifies the type of header immediately following the Destination Options header.  Uses the same values as the IPv4 Protocol field [IANA-PN]. Hdr Ext Len         8-bit unsigned integer.  Length of the Destination Options header in 8-octet units, not including the first 8 octets. Options             Variable-length field, of length such that the complete Destination Options header is an integer multiple of 8 octets long.  Contains one or more TLV-encoded options, as described in Section 4.2. The only destination options defined in this document are the Pad1 and PadN options specified in Section 4.2. Note that there are two possible ways to encode optional destination information in an IPv6 packet: either as an option in the Destination Options header or as a separate extension header.  The Fragment header and the Authentication header are examples of the latter approach.  Which approach can be used depends on what action is desired of a destination node that does not understand the optional information: o  If the desired action is for the destination node to discard the packet and, only if the packet's Destination Address is not a multicast address, send an ICMP Unrecognized Type message to the packet's Source Address, then the information may be encoded either as a separate header or as an option in the in its highest-order 2 bits.  The choice may depend on such factors as which takes fewer octets, or which yields better alignment or more efficient parsing. o  If any other action is desired, the information must be encoded as an option in the Destination Options header whose Option Type has the value 00, 01, or 10 in its highest-order 2 bits, specifying the desired action (see Section 4.2).
The value 59 in the Next Header field of an IPv6 header or any extension header indicates that there is nothing following that header.  If the Payload Length field of the IPv6 header indicates the presence of octets past the end of a header whose Next Header field contains 59, those octets must be ignored and passed on unchanged if the packet is forwarded.
Header-Specific Data                         .
Next Header           8-bit selector.  Identifies the type of header immediately following the extension header.  Uses the same values as the IPv4 Protocol field [IANA-PN]. Hdr Ext Len           8-bit unsigned integer.  Length of the Destination Options header in 8-octet units, not including the first 8 octets. Header Specific Data  Variable-length field.  Fields specific to the extension header.
IPv6 requires that every link in the Internet have an MTU of 1280 octets or greater.  This is known as the IPv6 minimum link MTU.  On any link that cannot convey a 1280-octet packet in one piece, link- specific fragmentation and reassembly must be provided at a layer below IPv6. Links that have a configurable MTU (for example, PPP links [RFC1661]) must be configured to have an MTU of at least 1280 octets; it is recommended that they be configured with an MTU of 1500 octets or greater, to accommodate possible encapsulations (i.e., tunneling) without incurring IPv6-layer fragmentation. From each link to which a node is directly attached, the node must be able to accept packets as large as that link's MTU. It is strongly recommended that IPv6 nodes implement Path MTU Discovery [RFC8201], in order to discover and take advantage of path MTUs greater than 1280 octets.  However, a minimal IPv6 implementation (e.g., in a boot ROM) may simply restrict itself to sending packets no larger than 1280 octets, and omit implementation of Path MTU Discovery. the IPv6 Fragment header to fragment the packet at the source and have it reassembled at the destination(s).  However, the use of such fragmentation is discouraged in any application that is able to adjust its packets to fit the measured path MTU (i.e., down to 1280 octets). A node must be able to accept a fragmented packet that, after reassembly, is as large as 1500 octets.  A node is permitted to accept fragmented packets that reassemble to more than 1500 octets. An upper-layer protocol or application that depends on IPv6 fragmentation to send packets larger than the MTU of a path should not send packets larger than 1500 octets unless it has assurance that the destination is capable of reassembling packets of that larger size.
The 20-bit Flow Label field in the IPv6 header is used by a source to label sequences of packets to be treated in the network as a single flow. The current definition of the IPv6 Flow Label can be found in [RFC6437].
The 8-bit Traffic Class field in the IPv6 header is used by the network for traffic management.  The value of the Traffic Class bits in a received packet or fragment might be different from the value sent by the packet's source. The current use of the Traffic Class field for Differentiated Services and Explicit Congestion Notification is specified in [RFC2474] and [RFC3168].
o  If the IPv6 packet contains a Routing header, the Destination Address used in the pseudo-header is that of the final destination.  At the originating node, that address will be in the last element of the Routing header; at the recipient(s), that address will be in the Destination Address field of the IPv6 header. o  The Next Header value in the pseudo-header identifies the upper-layer protocol (e.g., 6 for TCP or 17 for UDP).  It will differ from the Next Header value in the IPv6 header if there are extension headers between the IPv6 header and the upper- layer header. length of the upper-layer header and data (e.g., TCP header plus TCP data).  Some upper-layer protocols carry their own length information (e.g., the Length field in the UDP header); for such protocols, that is the length used in the pseudo- header.  Other protocols (such as TCP) do not carry their own length information, in which case the length used in the pseudo-header is the Payload Length from the IPv6 header, minus the length of any extension headers present between the IPv6 header and the upper-layer header. o  Unlike IPv4, the default behavior when UDP packets are originated by an IPv6 node is that the UDP checksum is not optional.  That is, whenever originating a UDP packet, an IPv6 node must compute a UDP checksum over the packet and the pseudo-header, and, if that computation yields a result of zero, it must be changed to hex FFFF for placement in the UDP header.  IPv6 receivers must discard UDP packets containing a zero checksum and should log the error. o  As an exception to the default behavior, protocols that use UDP as a tunnel encapsulation may enable zero-checksum mode for a specific port (or set of ports) for sending and/or receiving. Any node implementing zero-checksum mode must follow the requirements specified in "Applicability Statement for the Use of IPv6 UDP Datagrams with Zero Checksums" [RFC6936]. The IPv6 version of ICMP [RFC4443] includes the above pseudo-header in its checksum computation; this is a change from the IPv4 version of ICMP, which does not include a pseudo-header in its checksum.  The reason for the change is to protect ICMP from misdelivery or corruption of those fields of the IPv6 header on which it depends, which, unlike IPv4, are not covered by an internet-layer checksum. The Next Header field in the pseudo-header for ICMP contains the value 58, which identifies the IPv6 version of ICMP.
Unlike IPv4, IPv6 nodes are not required to enforce maximum packet lifetime.  That is the reason the IPv4 "Time-to-Live" field was renamed "Hop Limit" in IPv6.  In practice, very few, if any, IPv4 implementations conform to the requirement that they limit packet lifetime, so this is not a change in practice.  Any upper-layer protocol that relies on the internet layer (whether IPv4 or IPv6) to limit packet lifetime ought to be upgraded to provide its own mechanisms for detecting and discarding obsolete packets. When computing the maximum payload size available for upper-layer data, an upper-layer protocol must take into account the larger size of the IPv6 header relative to the IPv4 header.  For example, in IPv4, TCP's Maximum Segment Size (MSS) option is computed as the maximum packet size (a default value or a value learned through Path MTU Discovery) minus 40 octets (20 octets for the minimum-length IPv4 header and 20 octets for the minimum-length TCP header).  When using TCP over IPv6, the MSS must be computed as the maximum packet size minus 60 octets, because the minimum-length IPv6 header (i.e., an IPv6 header with no extension headers) is 20 octets longer than a minimum-length IPv4 header.
When an upper-layer protocol sends one or more packets in response to a received packet that included a Routing header, the response packet(s) must not include a Routing header that was automatically derived by "reversing" the received Routing header UNLESS the integrity and authenticity of the received Source Address and Routing header have been verified (e.g., via the use of an Authentication header in the received packet).  In other words, only the following kinds of packets are permitted in response to a received packet bearing a Routing header: o  Response packets that do not carry Routing headers. o  Response packets that carry Routing headers that were NOT derived by reversing the Routing header of the received packet (for example, a Routing header supplied by local configuration). o  Response packets that carry Routing headers that were derived by reversing the Routing header of the received packet IF AND ONLY IF the integrity and authenticity of the Source Address and Routing header from the received packet have been verified by the responder.
RFC 2460 is referenced in a number of IANA registries.  These include: o  Internet Protocol Version 6 (IPv6) Parameters [IANA-6P] o  Assigned Internet Protocol Numbers [IANA-PN] o  Network Layer Protocol Identifiers (NLPIDs) of Interest [IANA-NL] o  Protocol Registries [IANA-PR] The IANA has updated these references to point to this document.
IPv6, from the viewpoint of the basic format and transmission of packets, has security properties that are similar to IPv4.  These security issues include: o  Eavesdropping, where on-path elements can observe the whole packet (including both contents and metadata) of each IPv6 datagram. o  Replay, where the attacker records a sequence of packets off of the wire and plays them back to the party that originally received them. o  Packet insertion, where the attacker forges a packet with some chosen set of properties and injects it into the network. o  Packet deletion, where the attacker removes a packet from the wire. o  Packet modification, where the attacker removes a packet from the wire, modifies it, and reinjects it into the network. o  Man-in-the-middle (MITM) attacks, where the attacker subverts the communication stream in order to pose as the sender to receiver and the receiver to the sender. o  Denial-of-service (DoS) attacks, where the attacker sends large amounts of legitimate traffic to a destination to overwhelm it. IPv6 packets can be protected from eavesdropping, replay, packet insertion, packet modification, and MITM attacks by use of the "Security Architecture for the Internet Protocol" [RFC4301].  In addition, upper-layer protocols such as Transport Layer Security (TLS) or Secure Shell (SSH) can be used to protect the application- layer traffic running on top of IPv6. There is not any mechanism to protect against DoS attacks.  Defending against these type of attacks is outside the scope of this specification. IPv6 addresses are significantly larger than IPv4 addresses making it much harder to scan the address space across the Internet and even on a single network link (e.g., Local Area Network).  See [RFC7707] for more information. Internet as compared with IPv4 since the use of address translation technology is reduced.  This creates some additional privacy issues such as making it easier to distinguish endpoints.  See [RFC7721] for more information. The design of IPv6 extension header architecture, while adding a lot of flexibility, also creates new security challenges.  As noted below, issues relating to the Fragment extension header have been resolved, but it's clear that for any new extension header designed in the future, the security implications need to be examined thoroughly, and this needs to include how the new extension header works with existing extension headers.  See [RFC7045] for more information. This version of the IPv6 specification resolves a number of security issues that were found with the previous version [RFC2460] of the IPv6 specification.  These include: o  Revised the text to handle the case of fragments that are whole datagrams (i.e., both the Fragment Offset field and the M flag are zero).  If received, they should be processed as a reassembled packet.  Any other fragments that match should be processed independently.  The Fragment creation process was modified to not create whole datagram fragments (Fragment Offset field and the M flag are zero).  See [RFC6946] and [RFC8021] for more information. o  Removed the paragraph in Section 5 that required including a Fragment header to outgoing packets if an ICMP Packet Too Big message reporting a Next-Hop MTU is less than 1280.  See [RFC6946] for more information. o  Changed the text to require that IPv6 nodes must not create overlapping fragments.  Also, when reassembling an IPv6 datagram, if one or more of its constituent fragments is determined to be an overlapping fragment, the entire datagram (and any constituent fragments) must be silently discarded. Includes clarification that no ICMP error message should be sent if overlapping fragments are received.  See [RFC5722] for more information. o  Revised the text to require that all headers through the first upper-layer header are in the first fragment.  See [RFC7112] for more information. the description of the Routing Header type 0 (RH0), that the allocations guidelines for Routing headers are specified in RFC 5871, and removed RH0 from the list of required extension headers. Security issues relating to other parts of IPv6 including addressing, ICMPv6, Path MTU Discovery, etc., are discussed in the appropriate specifications.