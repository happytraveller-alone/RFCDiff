resource record pertains.
that the resource record may be cached before the source of the information should again be consulted.  Zero values are interpreted to mean that the RR can only be used for the transaction in progress, and should not be cached.  For example, SOA records are always distributed with a zero TTL to prohibit caching.  Zero values can also be used for extremely volatile data.
octets of the RDATA field. resource.  The format of this information varies according to the TYPE and CLASS of the resource record.
name for the owner.  The owner name is an alias.
system type.
specified mailbox.
agent for the domain which should be able to deliver mail for the domain.
agent for the domain which will accept mail for forwarding to the domain.
member of the mail group specified by the domain name.
responsible for the mailing list or mailbox.  If this domain name names the root, the owner of the MINFO RR is responsible for itself.  Note that many existing mailing lists use a mailbox X-request for the RMAILBX field of mailing list X, e.g., Msgroup-request for Msgroup.  This field provides a more general mechanism.
receive error messages related to the mailing list or mailbox specified by the owner of the MINFO RR (similar to the ERRORS-TO: field which has been proposed).  If this domain name names the root, errors should be returned to the sender of the message.
proper rename of the specified mailbox.
this RR among others at the same owner.  Lower values are preferred.
a mail exchange for the owner name.
authoritative for the specified class and domain.
domain name space.
original or primary source of data for this zone.
person responsible for this zone.
of the zone.  Zone transfers preserve this value.  This value wraps and should be compared using sequence space arithmetic.
refreshed.
failed refresh should be retried.
the time interval that can elapse before the zone is no longer authoritative. exported with any RR from this zone.
multiple of 8 bits long.
IN-ADDR.ARPA.           PTR MILNET-GW.ISI.EDU. 10.IN-ADDR.ARPA.           PTR GW.LCS.MIT.EDU. 18.IN-ADDR.ARPA.           PTR GW.LCS.MIT.EDU. 26.IN-ADDR.ARPA.           PTR MILNET-GW.ISI.EDU. 22.0.2.10.IN-ADDR.ARPA.    PTR MILNET-GW.ISI.EDU. 103.0.0.26.IN-ADDR.ARPA.   PTR MILNET-GW.ISI.EDU. 77.0.0.10.IN-ADDR.ARPA.    PTR GW.LCS.MIT.EDU. 4.0.10.18.IN-ADDR.ARPA.    PTR GW.LCS.MIT.EDU. 103.0.3.26.IN-ADDR.ARPA.   PTR A.ISI.EDU. 6.0.0.10.IN-ADDR.ARPA.     PTR MULTICS.MIT.EDU.
IN-ADDR.ARPA.           PTR MILNET-GW.ISI.EDU. 10.IN-ADDR.ARPA.           PTR GW.LCS.MIT.EDU.
IN-ADDR.ARPA.     PTR MULTICS.MIT.EDU.
Since the IN-ADDR.ARPA special domain and the normal domain for a particular host or gateway will be in different zones, the possibility exists that that the data may be inconsistent. - Gateways will often have two names in separate domains, only one of which can be primary. - Systems that use the domain database to initialize their routing tables must start with enough gateway information to guarantee that they can access the appropriate name server. - The gateway data only reflects the existence of a gateway in a manner equivalent to the current HOSTS.TXT file.  It doesn't replace the dynamic availability information from GGP or EGP.
generates any kind of query.  This identifier is copied the corresponding reply and can be used by the requester to match up replies to outstanding queries.
query (0), or a response (1).
and specifies that the responding name server is an authority for the domain name in question section. Note that the contents of the answer section may have multiple owner names because of aliases.  The AA bit the first owner name in the answer section.
due to length greater than that permitted on the transmission channel.
is copied into the response.  If RD is set, it directs the name server to pursue the query recursively. Recursive query support is optional.
response, and denotes whether recursive query support is available in the name server.
and responses.
responses.  The values have the following interpretation: 0               No error condition 1               Format error - The name server was unable to interpret the query. 2               Server failure - The name server was unable to process this query due to a problem with the name server. 3               Name Error - Meaningful only for responses from an authoritative name server, this code signifies that the domain name referenced in the query does not exist. 4               Not Implemented - The name server does not support the requested kind of query. 5               Refused - The name server refuses to perform the specified operation for policy reasons.  For example, a name server may not wish to provide the information to the particular requester, or a name server may not wish to perform a particular operation (e.g., zone 6-15            Reserved for future use.
entries in the question section.
resource records in the answer section.
server resource records in the authority records section.
resource records in the additional records section.
each label consists of a length octet followed by that number of octets.  The domain name terminates with the zero length octet for the null label of the root.  Note that this field may be an odd number of octets; no padding is used.
The values for this field include all codes valid for a TYPE field, together with some more general codes which can match more than one type of RR. For example, the QCLASS field is IN for the Internet.
field specifies the meaning of the data in the RDATA field.
RDATA field.
interval (in seconds) that the resource record may be cached before it should be discarded.  Zero values are interpreted to mean that the RR can only be used for the transaction in progress, and should not be cached. octets of the RDATA field.
resource.  The format of this information varies according to the TYPE and CLASS of the resource record. For example, the if the TYPE is A and the CLASS is IN, the RDATA field is a 4 octet ARPA Internet address.
The client should try other servers and server addresses before repeating a query to a specific address of a server. - The retransmission interval should be based on prior statistics if possible.  Too aggressive retransmission can easily slow responses for the community at large.  Depending on how well connected the client is to its expected servers, the minimum retransmission interval should be 2-5 seconds.
The server should not block other activities waiting for TCP data. - The server should support multiple connections. - The server should assume that the client will initiate connection closing, and should delay closing its end of the connection until all outstanding client requests have been satisfied. - If the server needs to close a dormant connection to reclaim resources, it should wait until the connection has been idle for a period on the order of two minutes.  In particular, the server should allow the SOA and AXFR request sequence (which begins a refresh operation) to be made on a single connection. Since the server would be unable to answer queries anyway, a unilateral close or reset may be used instead of a graceful close.
of the root.
used to quote that character so that its special meaning does not apply.  For example, "\." can be used to place a dot character in a label.
the decimal number described by DDD.  The resulting octet is assumed to be text and is not checked for special meaning.
boundary.  In effect, line terminations are not recognized within parentheses.
the line is ignored.
All RRs in the file should have the same class. 2. Exactly one SOA RR should be present at the top of the zone. 3. If delegations are present and glue information is required, it should be present. zone should be glue information, rather than the result of an origin or similar error.
The catalog structure can be an almost static structure that need change only when the system administrator changes the zones supported by the server.  This structure can also be used to store parameters used to control refreshing activities. - The individual data structures for zones allow a zone to be replaced simply by changing a pointer in the catalog.  Zone refresh operations can build a new structure and, when complete, splice it into the database via a simple pointer replacement.  It is very important that when a zone is refreshed, queries should not use old and new data simultaneously. - With the proper search procedures, authoritative data in zones will always "hide", and hence take precedence over, cached data. - Errors in zone definitions that cause overlapping zones, etc., may cause erroneous responses to queries, but problem determination is simplified, and the contents of one "bad" zone can't corrupt another. - Since the cache is most frequently updated, it is most vulnerable to corruption during system restarts.  It can also become full of expired RR data.  In either case, it can easily be discarded without disturbing zone data.
zero, one, or multiple domain names for the specified resource as QNAMEs in the question section inverse mapping of the specified resource type.
A timestamp indicating the time the request began. The timestamp is used to decide whether RRs in the database can be used or are out of date.  This timestamp uses the absolute time format previously discussed for RR storage in zones and caches.  Note that when an RRs TTL indicates a relative time, the RR must be timely, since it is part of a zone.  When the RR has an absolute time, it is part of a cache, and the TTL of the RR is compared against the timestamp for the start of the request. Note that using the timestamp is superior to using a current time, since it allows RRs with TTLs of zero to be entered in the cache in the usual manner, but still used by the current request, even after intervals of many seconds due to system load, query retransmission timeouts, etc. - Some sort of parameters to limit the amount of work which will be performed for this request. The amount of work which a resolver will do in response to a client request must be limited to guard against errors in the database, such as circular CNAME references, and operational problems, such as network partition which prevents the local limits on the number of times a resolver will retransmit a particular query to a particular name server address are essential, the resolver should have a global per-request counter to limit work on a single request.  The counter should be set to some initial value and decremented whenever the resolver performs any action (retransmission timeout, retransmission, etc.)  If the counter passes zero, the request is terminated with a temporary error. Note that if the resolver structure allows one request to start others in parallel, such as when the need to access a name server for one request causes a parallel resolve for the name server's addresses, the spawned request should be started with a lower counter.  This prevents circular references in the database from starting a chain reaction of resolver activity. - The SLIST data structure discussed in [RFC-1034]. This structure keeps track of the state of a request if it must wait for answers from foreign name servers.
The resolver may encounter a situation where no addresses are available for any of the name servers named in SLIST, and where the servers in the list are precisely those which would normally be used to look up their own addresses.  This situation typically occurs when the glue address RRs have a smaller TTL than the NS RRs marking delegation, or when the resolver caches the result of a NS search.  The resolver should detect this condition and restart the search at the next ancestor zone, or alternatively at the root. from a name server, it should remove it from SLIST, and may wish to schedule an immediate transmission to the next candidate server address.
Check the header for reasonableness.  Discard datagrams which are queries when responses are expected. - Parse the sections of the message, and insure that all RRs are correctly formatted. - As an optional step, check the TTLs of arriving data looking for RRs with excessively long TTLs.  If a RR has an excessively long TTL, say greater than 1 week, either discard the whole response, or limit all TTLs in the response to 1 week.
Some name servers send their responses from different addresses than the one used to receive the query.  That is, a resolver cannot rely that a response will come from the same address which it sent the corresponding query to.  This name server bug is typically encountered in UNIX systems. - If the resolver retransmits a particular request to a name server it should be able to use a response from any of the transmissions.  However, if it is using the response to sample the round trip time to access the name server, it must be able to determine which transmission matches the response (and keep transmission times for each outgoing message), or only calculate round trip times based on initial transmissions. - A name server will occasionally not have a current copy of a zone which it should have according to some NS RRs.  The resolver should simply remove the name server from the current SLIST, and continue.
When several RRs of the same type are available for a particular owner name, the resolver should either cache them all or none at all.  When a response is truncated, and a resolver doesn't know whether it has a complete set, it should not cache a possibly partial set of RRs. - Cached data should never be used in preference to authoritative data, so if caching would cause this to happen the data should not be cached. - The results of an inverse query should not be cached. - The results of standard queries where the QNAME contains "*" labels if the data might be used to construct wildcards.  The reason is that the cache does not necessarily contain existing RRs or zone boundary information which is necessary to restrict the application of the wildcard RRs. - RR data in responses of dubious reliability.  When a resolver receives unsolicited responses or RR data other than that requested, it should discard it without caching it.  The basic implication is that all sanity checks on a packet should be performed before any of it is cached.
does not exist as a domain name. In the long term, this would indicate that the specified mailbox doesn't exist.  However, until the use of mailbox binding is universal, this error condition should be interpreted to mean that the organization identified by the global part does not support mailbox binding.  The appropriate procedure is to revert to exchange binding at this point. 2. The query can return a Mail Rename (MR) RR. The MR RR carries new mailbox specification in its RDATA field.  The mailer should replace the old mailbox with the new one and retry the operation. 3. The query can return a MB RR. The MB RR carries a domain name for a host in its RDATA field.  The mailer should deliver the message to that host via whatever protocol is applicable, e.g., b,SMTP. 4. The query can return one or more Mail Group (MG) RRs. This condition means that the mailbox was actually a mailing list or mail group, rather than a single mailbox.  Each MG RR has a RDATA field that identifies a mailbox that is a member of the group.  The mailer should deliver a copy of the message to each member. 5. The query can return a MB RR as well as one or more MG RRs. This condition means the the mailbox was actually a mailing list.  The mailer can either deliver the message to the host specified by the MB RR, which will in turn do the delivery to all members, or the mailer can use the MG RRs to do the expansion itself.
Technical Plan - Name Service, April 1987, version 1.9. Describes the fundamentals of the Hesiod name service.
USC/Information Sciences Institute, August 1979. A name service obsoleted by the Domain Name System, but still in use.
Communications of the ACM, October 1986, volume 29, number 10.
Information Center, SRI International, December 1977.
USC/Information Sciences Institute, August 1980.
USC/Information Sciences Institute, September 1981.
September 1981. Suggests introduction of a hierarchy in place of a flat name space for the Internet.
USC/Information Sciences Institute, February 1982.
Internet Host Table Specification", RFC-810, Network Information Center, SRI International, March 1982. Obsolete.  See RFC-952.
Server", RFC-811, Network Information Center, SRI International, March 1982.
Network Information Center, SRI International, March 1982.
Internet User Applications", RFC-819, Network Information Center, SRI International, August 1982. Early thoughts on the design of the domain system. Current implementation is completely different.
USC/Information Sciences Institute, August 1980.
RFC-830, Network Information Center, SRI International, October 1982. Early thoughts on the design of the domain system. Current implementation is completely different.
Facilities," RFC-882, USC/Information Sciences Institute, November 1983. Superceeded by this memo.
Specification," RFC-883, USC/Information Sciences Institute, November 1983. Superceeded by this memo.
RFC-920, USC/Information Sciences Institute, October 1984. Explains the naming scheme for top level domains.
Table Specification", RFC-952, SRI, October 1985. Specifies the format of HOSTS.TXT, the host/address table replaced by the DNS. RFC-953, SRI, October 1985. This RFC contains the official specification of the hostname server protocol, which is obsoleted by the DNS. This TCP based protocol accesses information stored in the RFC-952 format, and is used to obtain copies of the host table.
Observations", RFC-973, USC/Information Sciences Institute, January 1986. Describes changes to RFC-882 and RFC-883 and reasons for them.
RFC-974, CSNET CIC BBN Labs, January 1986. Describes the transition from HOSTS.TXT based mail addressing to the more powerful MX system used with the domain system.
service on a TCP/UDP transport: Concepts and Methods", RFC-1001, March 1987. This RFC and RFC-1002 are a preliminary design for NETBIOS on top of TCP/IP which proposes to base NetBIOS name service on top of the DNS.
service on a TCP/UDP transport: Detailed Specifications", RFC-1002, March 1987.
USC/Information Sciences Institute, May 1987. Contains socket numbers and mnemonics for host names, operating systems, etc.
November 1987. Describes a plan for converting the MILNET to the DNS.
Administrators", RFC-1032, November 1987. administer the top level domains and delegate subzones.
RFC-1033, November 1987. A cookbook for domain administrators.